schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Collateral {
  id: ID!
  collateralID: BigInt!
  underlyingTokenAddr: String!
  collateralTokenAddr: String!
  hTokenAddr: String!
  activeCoupon: Coupon!
  active: Boolean!
}

input Collateral_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  collateralID: BigInt
  collateralID_not: BigInt
  collateralID_gt: BigInt
  collateralID_lt: BigInt
  collateralID_gte: BigInt
  collateralID_lte: BigInt
  collateralID_in: [BigInt!]
  collateralID_not_in: [BigInt!]
  underlyingTokenAddr: String
  underlyingTokenAddr_not: String
  underlyingTokenAddr_gt: String
  underlyingTokenAddr_lt: String
  underlyingTokenAddr_gte: String
  underlyingTokenAddr_lte: String
  underlyingTokenAddr_in: [String!]
  underlyingTokenAddr_not_in: [String!]
  underlyingTokenAddr_contains: String
  underlyingTokenAddr_contains_nocase: String
  underlyingTokenAddr_not_contains: String
  underlyingTokenAddr_not_contains_nocase: String
  underlyingTokenAddr_starts_with: String
  underlyingTokenAddr_starts_with_nocase: String
  underlyingTokenAddr_not_starts_with: String
  underlyingTokenAddr_not_starts_with_nocase: String
  underlyingTokenAddr_ends_with: String
  underlyingTokenAddr_ends_with_nocase: String
  underlyingTokenAddr_not_ends_with: String
  underlyingTokenAddr_not_ends_with_nocase: String
  collateralTokenAddr: String
  collateralTokenAddr_not: String
  collateralTokenAddr_gt: String
  collateralTokenAddr_lt: String
  collateralTokenAddr_gte: String
  collateralTokenAddr_lte: String
  collateralTokenAddr_in: [String!]
  collateralTokenAddr_not_in: [String!]
  collateralTokenAddr_contains: String
  collateralTokenAddr_contains_nocase: String
  collateralTokenAddr_not_contains: String
  collateralTokenAddr_not_contains_nocase: String
  collateralTokenAddr_starts_with: String
  collateralTokenAddr_starts_with_nocase: String
  collateralTokenAddr_not_starts_with: String
  collateralTokenAddr_not_starts_with_nocase: String
  collateralTokenAddr_ends_with: String
  collateralTokenAddr_ends_with_nocase: String
  collateralTokenAddr_not_ends_with: String
  collateralTokenAddr_not_ends_with_nocase: String
  hTokenAddr: String
  hTokenAddr_not: String
  hTokenAddr_gt: String
  hTokenAddr_lt: String
  hTokenAddr_gte: String
  hTokenAddr_lte: String
  hTokenAddr_in: [String!]
  hTokenAddr_not_in: [String!]
  hTokenAddr_contains: String
  hTokenAddr_contains_nocase: String
  hTokenAddr_not_contains: String
  hTokenAddr_not_contains_nocase: String
  hTokenAddr_starts_with: String
  hTokenAddr_starts_with_nocase: String
  hTokenAddr_not_starts_with: String
  hTokenAddr_not_starts_with_nocase: String
  hTokenAddr_ends_with: String
  hTokenAddr_ends_with_nocase: String
  hTokenAddr_not_ends_with: String
  hTokenAddr_not_ends_with_nocase: String
  activeCoupon: String
  activeCoupon_not: String
  activeCoupon_gt: String
  activeCoupon_lt: String
  activeCoupon_gte: String
  activeCoupon_lte: String
  activeCoupon_in: [String!]
  activeCoupon_not_in: [String!]
  activeCoupon_contains: String
  activeCoupon_contains_nocase: String
  activeCoupon_not_contains: String
  activeCoupon_not_contains_nocase: String
  activeCoupon_starts_with: String
  activeCoupon_starts_with_nocase: String
  activeCoupon_not_starts_with: String
  activeCoupon_not_starts_with_nocase: String
  activeCoupon_ends_with: String
  activeCoupon_ends_with_nocase: String
  activeCoupon_not_ends_with: String
  activeCoupon_not_ends_with_nocase: String
  activeCoupon_: Coupon_filter
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Collateral_orderBy {
  id
  collateralID
  underlyingTokenAddr
  collateralTokenAddr
  hTokenAddr
  activeCoupon
  active
}

type Coupon {
  id: ID!
  collateralID: BigInt!
  couponID: BigInt!
  underlyingTokenAddr: String!
  collateralTokenAddr: String!
  hTokenAddr: String!
  active: Boolean!
  amount: BigInt!
  timestamp: BigInt!
  lastUpdateTimestamp: BigInt!
}

input Coupon_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  collateralID: BigInt
  collateralID_not: BigInt
  collateralID_gt: BigInt
  collateralID_lt: BigInt
  collateralID_gte: BigInt
  collateralID_lte: BigInt
  collateralID_in: [BigInt!]
  collateralID_not_in: [BigInt!]
  couponID: BigInt
  couponID_not: BigInt
  couponID_gt: BigInt
  couponID_lt: BigInt
  couponID_gte: BigInt
  couponID_lte: BigInt
  couponID_in: [BigInt!]
  couponID_not_in: [BigInt!]
  underlyingTokenAddr: String
  underlyingTokenAddr_not: String
  underlyingTokenAddr_gt: String
  underlyingTokenAddr_lt: String
  underlyingTokenAddr_gte: String
  underlyingTokenAddr_lte: String
  underlyingTokenAddr_in: [String!]
  underlyingTokenAddr_not_in: [String!]
  underlyingTokenAddr_contains: String
  underlyingTokenAddr_contains_nocase: String
  underlyingTokenAddr_not_contains: String
  underlyingTokenAddr_not_contains_nocase: String
  underlyingTokenAddr_starts_with: String
  underlyingTokenAddr_starts_with_nocase: String
  underlyingTokenAddr_not_starts_with: String
  underlyingTokenAddr_not_starts_with_nocase: String
  underlyingTokenAddr_ends_with: String
  underlyingTokenAddr_ends_with_nocase: String
  underlyingTokenAddr_not_ends_with: String
  underlyingTokenAddr_not_ends_with_nocase: String
  collateralTokenAddr: String
  collateralTokenAddr_not: String
  collateralTokenAddr_gt: String
  collateralTokenAddr_lt: String
  collateralTokenAddr_gte: String
  collateralTokenAddr_lte: String
  collateralTokenAddr_in: [String!]
  collateralTokenAddr_not_in: [String!]
  collateralTokenAddr_contains: String
  collateralTokenAddr_contains_nocase: String
  collateralTokenAddr_not_contains: String
  collateralTokenAddr_not_contains_nocase: String
  collateralTokenAddr_starts_with: String
  collateralTokenAddr_starts_with_nocase: String
  collateralTokenAddr_not_starts_with: String
  collateralTokenAddr_not_starts_with_nocase: String
  collateralTokenAddr_ends_with: String
  collateralTokenAddr_ends_with_nocase: String
  collateralTokenAddr_not_ends_with: String
  collateralTokenAddr_not_ends_with_nocase: String
  hTokenAddr: String
  hTokenAddr_not: String
  hTokenAddr_gt: String
  hTokenAddr_lt: String
  hTokenAddr_gte: String
  hTokenAddr_lte: String
  hTokenAddr_in: [String!]
  hTokenAddr_not_in: [String!]
  hTokenAddr_contains: String
  hTokenAddr_contains_nocase: String
  hTokenAddr_not_contains: String
  hTokenAddr_not_contains_nocase: String
  hTokenAddr_starts_with: String
  hTokenAddr_starts_with_nocase: String
  hTokenAddr_not_starts_with: String
  hTokenAddr_not_starts_with_nocase: String
  hTokenAddr_ends_with: String
  hTokenAddr_ends_with_nocase: String
  hTokenAddr_not_ends_with: String
  hTokenAddr_not_ends_with_nocase: String
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Coupon_orderBy {
  id
  collateralID
  couponID
  underlyingTokenAddr
  collateralTokenAddr
  hTokenAddr
  active
  amount
  timestamp
  lastUpdateTimestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  coupon(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Coupon
  coupons(
    skip: Int = 0
    first: Int = 100
    orderBy: Coupon_orderBy
    orderDirection: OrderDirection
    where: Coupon_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Coupon!]!
  collateral(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collateral
  collaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: Collateral_orderBy
    orderDirection: OrderDirection
    where: Collateral_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collateral!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  coupon(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Coupon
  coupons(
    skip: Int = 0
    first: Int = 100
    orderBy: Coupon_orderBy
    orderDirection: OrderDirection
    where: Coupon_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Coupon!]!
  collateral(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collateral
  collaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: Collateral_orderBy
    orderDirection: OrderDirection
    where: Collateral_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collateral!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}